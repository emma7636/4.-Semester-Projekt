@page "/machine_info"
@inject Core.Core core;
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/machine_info.css">
    <title>Machine Info</title>
</head>

<body>
    <div id="wrapper">
        <div class="mci" id="warehouse">
            <h1>Warehouse</h1>
            <h3>State</h3>
            <p id="Wstate">@Warehouse_state</p>
            <h3>Timestamp</h3>
            <p id="Wtimestamp">timestamp</p>
            <h3>Inventory</h3>

        </div>

        <div class="mci" id="AGV">
            <h1>AGV</h1>
            <h3>State</h3>
            <p id="Astate"></p>
            <h3>Battery</h3>
            <p id="Abattery">battery</p>
            <h3>Program</h3>
            <p id="Aprogram">program</p>
            <h3>Timestamp</h3>
            <p id="Atimestamp">timestamp</p>
        </div>

        <div class="mci" id="Assemblystation">
            <h1>Assemblystation</h1>
            <h3>State</h3>
            <p id="ASstate">state</p>
            <h3>Last operation</h3>
            <p id="ASl_operation">last operation</p>
            <h3>Timestamp</h3>
            <p id="AStimestamp">timestamp</p>
            <h3>Health</h3>
            <p id="AShealth">health</p>
        </div>
        <button @onclick="refresh">Refresh</button>
    </div>

</body>

</html>


@code {
    [Parameter]
    public string Warehouse_state { get; set; } = "test";

    private void update_warehouse()
    {

        Warehouse_state = core.GetState("Warehouse")["State: "];
        InvokeAsync(() => StateHasChanged());
        Console.WriteLine("Cock and ball torture");
    }

    public void refresh()
    {
        Console.WriteLine("Cock and ball torture");
        //update_warehouse();    
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            Console.WriteLine("f");
           InvokeAsync(() => update_warehouse());
        }
    }
}